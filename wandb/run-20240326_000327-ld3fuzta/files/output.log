Dataset: cifar10
Effective batch-size is 32 * 1 = 32.
Files already downloaded and verified
Checkpoint will be saved to /home/evan0830/diffusion/ddpm-torch/chkpts/cifar10/cifar10.pt every 10 epoch(s)
Generated images (x32) will be saved to /home/evan0830/diffusion/ddpm-torch/images/train/cifar10 every 10 epoch(s)
cuDNN benchmark: ON
Training starts...





1/2040 epochs:   3%|██▎                                                                             | 46/1562 [00:13<07:15,  3.48it/s, loss=0.998]
Traceback (most recent call last):
  File "/home/evan0830/diffusion/ddpm-torch/train.py", line 313, in <module>
    main()
  File "/home/evan0830/miniconda3/envs/diffusion/lib/python3.11/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 347, in wrapper
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "/home/evan0830/diffusion/ddpm-torch/train.py", line 309, in main
    train(args=args, wandb= wandb)
  File "/home/evan0830/diffusion/ddpm-torch/train.py", line 237, in train
    trainer.train(evaluator, chkpt_path=chkpt_path, image_dir=image_dir)
  File "/home/evan0830/diffusion/ddpm-torch/ddpm_torch/utils/train.py", line 226, in train
    self.step(x.to(self.device), global_steps=global_steps)
  File "/home/evan0830/diffusion/ddpm-torch/ddpm_torch/utils/train.py", line 162, in step
    error_loss = self.error_loss(x).mean()
                 ^^^^^^^^^^^^^^^^^^
  File "/home/evan0830/diffusion/ddpm-torch/ddpm_torch/utils/train.py", line 151, in error_loss
    error_loss = self.diffusion.train_errorlosses(self.model, **self.get_input(x))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/evan0830/diffusion/ddpm-torch/ddpm_torch/diffusion.py", line 262, in train_errorlosses
    x_error = self.q_sample(x_0 = x_0, t = t-1, noise = eff_noise)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/evan0830/diffusion/ddpm-torch/ddpm_torch/diffusion.py", line 99, in q_sample
    coef1 = self._extract(self.sqrt_alphas_bar, t, x_0)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/evan0830/diffusion/ddpm-torch/ddpm_torch/diffusion.py", line 87, in _extract
    out = torch.as_tensor(arr, dtype=dtype, device=device).gather(0, t)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.